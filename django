#!/bin/bash

# Ensure correct usage
if [ "$#" -lt 1 ]; then
    echo "Usage: ./django <create|delete|run|list-projects|mgmt> [project_name].[app_name].[mod_name] [mgmt_cmd]"
    exit 1
fi

COMMAND=$1
PROJECT_INPUT=$2
MGMT_CMD=$3  # Used for the 'mgmt' command
DPM_NAME=django_project_mgmt.py
DPM_DIR=./automate/bin
DPM_EXE=$DPM_DIR/$DPM_NAME
PYTHON_EXE=python

# Read PROJECT_BASE_DIR from config.ini
CONFIG_FILE=./config.ini
PROJECT_BASE_DIR=$(awk -F' *= *' '$1=="PROJECT_BASE_DIR"{print $2}' "$CONFIG_FILE")

# Fallback to default if config.ini is missing
if [ -z "$PROJECT_BASE_DIR" ]; then
    PROJECT_BASE_DIR="env/dev"
    echo "PROJECT_BASE_DIR not found in $CONFIG_FILE. Using default value: $PROJECT_BASE_DIR"
fi
# Determine if input contains dots (app or module)
IFS='.' read -r PROJECT_NAME APP_NAME MOD_NAME <<< "$PROJECT_INPUT"
PROJECT_PATH="$PROJECT_BASE_DIR/$PROJECT_NAME"

# Identify if the input is a project, app, or module
CREATE_APP="false"
CREATE_MOD="false"

if [[ -n "$APP_NAME" && -z "$MOD_NAME" ]]; then
    CREATE_APP="true"
elif [[ -n "$APP_NAME" && -n "$MOD_NAME" ]]; then
    CREATE_APP="true"
    CREATE_MOD="true"
fi

# echo "PROJECT_NAME: $PROJECT_NAME"
# echo "PROJECT_PATH: $PROJECT_PATH"
# echo "PROJECT_BASE_DIR: $PROJECT_BASE_DIR"
# echo "CREATE_APP: $CREATE_APP"
# echo "CREATE_MOD: $CREATE_MOD"
# exit 1

# Validate commands
if [[ "$COMMAND" != "create" && "$COMMAND" != "delete" && "$COMMAND" != "run" && "$COMMAND" != "list-projects" && "$COMMAND" != "mgmt" ]]; then
    echo "Invalid command: $COMMAND"
    echo "Usage: ./django <create|delete|run|list-projects|mgmt> [project_name].[app_name].[mod_name] [mgmt_cmd]"
    exit 1
fi

if [ "$COMMAND" == "create" ]; then
   # Creating a Django project
    $PYTHON_EXE $DPM_EXE create "$PROJECT_INPUT"

    if [ $? -eq 0 ]; then
        # Create shortcut scripts inside the project directory
        echo -e "#!/bin/bash\npython manage.py makemigrations" > "$PROJECT_PATH/m1"
        echo -e "#!/bin/bash\npython manage.py migrate" > "$PROJECT_PATH/m2"
        echo -e "#!/bin/bash\npython manage.py runserver" > "$PROJECT_PATH/m3"
        echo -e "#!/bin/bash\n./m1\n./m2\n./m3" > "$PROJECT_PATH/m123"

        # Make scripts executable
        chmod +x "$PROJECT_PATH/m1" "$PROJECT_PATH/m2" "$PROJECT_PATH/m3" "$PROJECT_PATH/m123"

        echo "Shortcuts 'm1', 'm2', 'm3', and 'm123' created in $PROJECT_PATH"
    fi
fi


if [ "$COMMAND" == "delete" ]; then
    $PYTHON_EXE $DPM_EXE delete "$PROJECT_NAME"
fi

if [ "$COMMAND" == "run" ]; then
    if [ ! -d "$PROJECT_PATH" ]; then
        echo "RUN-Error: Django project '$PROJECT_NAME' does not exist."
        exit 1
    fi

    if [ ! -f "$PROJECT_PATH/m3" ]; then
        echo "RUN-Error: Shortcut 'm3' not found in $PROJECT_PATH"
        exit 1
    fi

    cd "$PROJECT_PATH"
    ./m3
fi

if [ "$COMMAND" == "mgmt" ]; then
    if [ -z "$MGMT_CMD" ]; then
        echo "Usage: ./django mgmt <project_name> <mgmt_cmd>"
        exit 1
    fi

    if [ ! -d "$PROJECT_PATH" ]; then
        echo "MGMT-Error: Django project '$PROJECT_NAME' does not exist."
        exit 1
    fi

    echo "Executing: python manage.py $MGMT_CMD inside $PROJECT_PATH"
    
    cd "$PROJECT_PATH"
    python manage.py "$MGMT_CMD"
fi


# LIST PROJECTS
if [ "$COMMAND" == "list-projects" ]; then
    if [ ! -d "$PROJECT_BASE_DIR" ]; then
        echo "Error: Base directory '$PROJECT_BASE_DIR' does not exist."
        exit 1
    fi

    # Count the number of directories (projects) inside the base directory
    PROJECT_COUNT=$(find "$PROJECT_BASE_DIR" -mindepth 1 -maxdepth 1 -type d | wc -l)
    
    echo "Total Django projects in '$PROJECT_BASE_DIR': $PROJECT_COUNT"
    
    # List all directories inside the base directory
    ls -d "$PROJECT_BASE_DIR"/* 2>/dev/null | xargs -n 1 basename
fi
